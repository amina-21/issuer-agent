{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.kchaou1\\\\Desktop\\\\PFE\\\\tuto\\\\agents\\\\MERN-app-agent-issuer\\\\client\\\\src\\\\components\\\\GenerateStoreCred\\\\GenerateStoreCred.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport qrcode from \"qrcode\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateStoreCred() {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const branch = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.branch;\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [defCred, setDefCred] = useState(\"\");\n  const [isQRCodeGenerated, setIsQRCodeGenerated] = useState(false);\n  if (!branch) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error: Missing branch data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n  const generateRandomPassword = () => {\n    // Generate a random password\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    let password = \"\";\n    for (let i = 0; i < 8; i++) {\n      password += characters.charAt(Math.floor(Math.random() * characters.length));\n    }\n    return password;\n  };\n  useEffect(() => {\n    // Fetch data from the backend server\n    axios.get(\"http://localhost:3007/defCred\").then(response => {\n      //setInvitations(response.data);\n      const data = response.data;\n      if (Array.isArray(data)) {\n        setDefCred(data);\n      } else {\n        console.error(\"def creds data is not an array:\", data);\n      }\n    }).catch(error => {\n      console.error(\"Failed to fetch stores:\", error);\n    });\n  }, []);\n  const username = branch.branchManager;\n  //const password = generateRandomPassword();\n\n  const handleGenerateQRCode = username => {\n    const defaultCred = defCred.find(cred => cred.username === username);\n    if (defaultCred) {\n      const credentialData = JSON.stringify({\n        username: defaultCred.username,\n        password: defaultCred.password\n      });\n      generateQRCode(credentialData);\n    } else {\n      const password = generateRandomPassword();\n      axios.post(\"http://localhost:3007/register-holder\", {\n        username: username,\n        password: password,\n        userRole: \"Holder\"\n      }).then(response => {\n        console.log(\"Credentials saved successfully\");\n        const credentialData = JSON.stringify({\n          username: response.data.username,\n          password: response.data.password\n        });\n        generateQRCode(credentialData);\n      }).catch(error => {\n        console.error(\"Failed to save credentials:\", error);\n      });\n    }\n  };\n  const generateQRCode = credentialData => {\n    qrcode.toDataURL(credentialData, (err, url) => {\n      if (err) {\n        console.error(err);\n      } else {\n        setQrCodeUrl(url);\n        setIsQRCodeGenerated(true);\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Generate Login Credentials for \", branch.branchName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      style: {\n        width: \"25rem\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"card-title\",\n          children: branch.branchName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n          className: \"card-subtitle mb-2 text-muted\",\n          children: branch.branchManager\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"card-text\",\n          children: \"Generate a QR code containing Login credentials to send traditionally (on paper) to this store.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-light\",\n          onClick: () => handleGenerateQRCode(username),\n          disabled: isQRCodeGenerated,\n          children: isQRCodeGenerated ? \"QR code generated\" : \"Generate QR code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-light\",\n          children: \"Print\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), qrCodeUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        marginTop: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"card\",\n        src: qrCodeUrl,\n        alt: \"QR code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(GenerateStoreCred, \"k86zxqZM1+GGLiq7zE397eeEVUM=\", false, function () {\n  return [useLocation];\n});\n_c = GenerateStoreCred;\nexport default GenerateStoreCred;\nvar _c;\n$RefreshReg$(_c, \"GenerateStoreCred\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","qrcode","axios","jsxDEV","_jsxDEV","GenerateStoreCred","_s","_location$state","location","branch","state","qrCodeUrl","setQrCodeUrl","defCred","setDefCred","isQRCodeGenerated","setIsQRCodeGenerated","children","fileName","_jsxFileName","lineNumber","columnNumber","generateRandomPassword","characters","password","i","charAt","Math","floor","random","length","get","then","response","data","Array","isArray","console","error","catch","username","branchManager","handleGenerateQRCode","defaultCred","find","cred","credentialData","JSON","stringify","generateQRCode","post","userRole","log","toDataURL","err","url","branchName","className","style","width","onClick","disabled","marginTop","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/a.kchaou1/Desktop/PFE/tuto/agents/MERN-app-agent-issuer/client/src/components/GenerateStoreCred/GenerateStoreCred.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport qrcode from \"qrcode\";\r\nimport axios from \"axios\";\r\n\r\nfunction GenerateStoreCred() {\r\n  const location = useLocation();\r\n  const branch = location.state?.branch;\r\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\r\n  const [defCred, setDefCred] = useState(\"\");\r\n  const [isQRCodeGenerated, setIsQRCodeGenerated] = useState(false);\r\n\r\n  \r\n  if (!branch) {\r\n    return <div>Error: Missing branch data</div>;\r\n  }\r\n\r\n  const generateRandomPassword = () => {\r\n    // Generate a random password\r\n    const characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let password = \"\";\r\n    for (let i = 0; i < 8; i++) {\r\n      password += characters.charAt(\r\n        Math.floor(Math.random() * characters.length)\r\n      );\r\n    }\r\n    return password;\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the backend server\r\n    axios\r\n      .get(\"http://localhost:3007/defCred\")\r\n      .then((response) => {\r\n        //setInvitations(response.data);\r\n        const data = response.data;\r\n        if (Array.isArray(data)) {\r\n          setDefCred(data);\r\n        } else {\r\n          console.error(\"def creds data is not an array:\", data);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Failed to fetch stores:\", error);\r\n      });\r\n  }, []);\r\n\r\n  const username = branch.branchManager;\r\n  //const password = generateRandomPassword();\r\n\r\n  const handleGenerateQRCode = (username) => {\r\n    const defaultCred = defCred.find((cred) => cred.username === username);\r\n\r\n    if (defaultCred) {\r\n      const credentialData = JSON.stringify({\r\n        username: defaultCred.username,\r\n        password: defaultCred.password,\r\n      });\r\n\r\n      generateQRCode(credentialData);\r\n    } else {\r\n      const password = generateRandomPassword();\r\n\r\n      axios\r\n        .post(\"http://localhost:3007/register-holder\", {\r\n          username: username,\r\n          password: password,\r\n          userRole: \"Holder\",\r\n        })\r\n        .then((response) => {\r\n          console.log(\"Credentials saved successfully\");\r\n\r\n          const credentialData = JSON.stringify({\r\n            username: response.data.username,\r\n            password: response.data.password,\r\n          });\r\n\r\n          generateQRCode(credentialData);\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Failed to save credentials:\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const generateQRCode = (credentialData) => {\r\n    qrcode.toDataURL(credentialData, (err, url) => {\r\n      if (err) {\r\n        console.error(err);\r\n      } else {\r\n        setQrCodeUrl(url);\r\n        setIsQRCodeGenerated(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Generate Login Credentials for {branch.branchName}</h1>\r\n      <div className=\"card\" style={{ width: \"25rem\" }}>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{branch.branchName}</h5>\r\n          <h6 className=\"card-subtitle mb-2 text-muted\">\r\n            {branch.branchManager}\r\n          </h6>\r\n          <p className=\"card-text\">\r\n            Generate a QR code containing Login credentials to send\r\n            traditionally (on paper) to this store.\r\n          </p>\r\n          <button\r\n            className=\"btn btn-light\"\r\n            onClick={() => handleGenerateQRCode(username)}\r\n            disabled={isQRCodeGenerated}\r\n          >\r\n            {isQRCodeGenerated ? \"QR code generated\" : \"Generate QR code\"}\r\n          </button>\r\n          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n          <button className=\"btn btn-light\">Print</button>\r\n        </div>\r\n      </div>\r\n      {qrCodeUrl && (\r\n        <div className=\"container\" style={{ marginTop: \"20px\" }}>\r\n          <img className=\"card\" src={qrCodeUrl} alt=\"QR code\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GenerateStoreCred;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}