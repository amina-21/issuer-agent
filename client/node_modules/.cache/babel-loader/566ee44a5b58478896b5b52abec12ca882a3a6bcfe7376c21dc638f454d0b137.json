{"ast":null,"code":"// import \"./App.css\";\n// import \"./components/boosted/css/boosted.min.css\";\n// import Home from \"./components/Home/Home\";\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n// import Register from \"./components/Register/Register\";\n// import NavBarAll from \"./components/NavBar/NavBarAll\";\n// import Login from \"./components/Login/Login\";\n// import IssuerHome from \"./components/IssuerHome/IssuerHome\";\n// import CreateInvitation from \"./components/IssuerHome/CreateInvitation\";\n// import ViewInvitations from \"./components/IssuerHome/ViewInvitations\";\n// import IssueCredential from \"./components/IssuerHome/IssueCredential\";\n// import ViewStores from \"./components/IssuerHome/ViewStores\";\n// import { useEffect, useState } from \"react\";\n// import NavBarIssuer from \"./components/NavBar/NavBarIssuer\";\n\n// function App() {\n//   const [userRole, setUserRole] = useState(\"\");\n//   const [hasReloaded, setHasReloaded] = useState(false);\n\n//   // Retrieve user role from session storage on component mount\n//   useEffect(() => {\n//     const storedUserRole = sessionStorage.getItem(\"userRole\");\n//     setUserRole(storedUserRole);\n//   }, []);\n\n//   // Function to handle user logout\n//   const handleLogout = () => {\n//     // Clear user role from session storage\n//     sessionStorage.removeItem(\"userRole\");\n//     setUserRole(\"\");\n//   };\n\n//   const [showNavbar, setShowNavbar] = useState(false);\n//   // Determine which navbar to show based on user role\n//   useEffect(() => {\n//     if (userRole === \"Issuer\" && !hasReloaded) {\n//       setShowNavbar(true);\n//       setHasReloaded(true);\n//       window.location.reload();\n//     } else {\n//       setShowNavbar(false);\n//     }\n//   }, [userRole, hasReloaded]);\n\n//   return (\n//     <div>\n//       <BrowserRouter>\n//         {showNavbar && userRole === \"Issuer\" && (\n//           <NavBarIssuer onLogout={handleLogout} />\n//         )}\n\n//         {!showNavbar && <NavBarAll />}\n\n//         {/* <NavBarAll /> */}\n//         <Routes>\n//           <Route exact path=\"/\" element={<Home />} />\n//           <Route path=\"/register\" element={<Register />} />\n//           <Route path=\"/login\" element={<Login />} />\n//           <Route path=\"/issuer-home\" element={<IssuerHome />} />\n\n//           <Route path=\"/create-invitation\" element={<CreateInvitation />} />\n//           <Route path=\"/view-invitations\" element={<ViewInvitations />} />\n//           <Route path=\"/view-stores\" element={<ViewStores />} />\n\n//           <Route path=\"/issue-credential/:did\" element={<IssueCredential />} />\n//         </Routes>\n//       </BrowserRouter>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/a.kchaou1/Desktop/PFE/tuto/agents/MERN-app-agent-issuer/client/src/App.js"],"sourcesContent":["// import \"./App.css\";\n// import \"./components/boosted/css/boosted.min.css\";\n// import Home from \"./components/Home/Home\";\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n// import Register from \"./components/Register/Register\";\n// import NavBarAll from \"./components/NavBar/NavBarAll\";\n// import Login from \"./components/Login/Login\";\n// import IssuerHome from \"./components/IssuerHome/IssuerHome\";\n// import CreateInvitation from \"./components/IssuerHome/CreateInvitation\";\n// import ViewInvitations from \"./components/IssuerHome/ViewInvitations\";\n// import IssueCredential from \"./components/IssuerHome/IssueCredential\";\n// import ViewStores from \"./components/IssuerHome/ViewStores\";\n// import { useEffect, useState } from \"react\";\n// import NavBarIssuer from \"./components/NavBar/NavBarIssuer\";\n\n// function App() {\n//   const [userRole, setUserRole] = useState(\"\");\n//   const [hasReloaded, setHasReloaded] = useState(false);\n\n//   // Retrieve user role from session storage on component mount\n//   useEffect(() => {\n//     const storedUserRole = sessionStorage.getItem(\"userRole\");\n//     setUserRole(storedUserRole);\n//   }, []);\n\n//   // Function to handle user logout\n//   const handleLogout = () => {\n//     // Clear user role from session storage\n//     sessionStorage.removeItem(\"userRole\");\n//     setUserRole(\"\");\n//   };\n\n//   const [showNavbar, setShowNavbar] = useState(false);\n//   // Determine which navbar to show based on user role\n//   useEffect(() => {\n//     if (userRole === \"Issuer\" && !hasReloaded) {\n//       setShowNavbar(true);\n//       setHasReloaded(true);\n//       window.location.reload();\n//     } else {\n//       setShowNavbar(false);\n//     }\n//   }, [userRole, hasReloaded]);\n\n//   return (\n//     <div>\n//       <BrowserRouter>\n//         {showNavbar && userRole === \"Issuer\" && (\n//           <NavBarIssuer onLogout={handleLogout} />\n//         )}\n\n//         {!showNavbar && <NavBarAll />}\n\n//         {/* <NavBarAll /> */}\n//         <Routes>\n//           <Route exact path=\"/\" element={<Home />} />\n//           <Route path=\"/register\" element={<Register />} />\n//           <Route path=\"/login\" element={<Login />} />\n//           <Route path=\"/issuer-home\" element={<IssuerHome />} />\n\n//           <Route path=\"/create-invitation\" element={<CreateInvitation />} />\n//           <Route path=\"/view-invitations\" element={<ViewInvitations />} />\n//           <Route path=\"/view-stores\" element={<ViewStores />} />\n\n//           <Route path=\"/issue-credential/:did\" element={<IssueCredential />} />\n//         </Routes>\n//       </BrowserRouter>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}